// Mocks generated by Mockito 5.0.10 from annotations
// in best_architecture_challenge/test/presentation_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:best_architecture_challenge/core/domain/fetch_post_usecase.dart'
    as _i3;
import 'package:best_architecture_challenge/core/model/post.dart' as _i5;
import 'package:best_architecture_challenge/core/repository/post_repository.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakePostRepository extends _i1.Fake implements _i2.PostRepository {}

/// A class which mocks [FetchPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchPostUseCase extends _i1.Mock implements _i3.FetchPostUseCase {
  MockFetchPostUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PostRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePostRepository()) as _i2.PostRepository);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i4.Future<List<_i5.Post>> execute(_i3.FetchPostUseCaseParams? param) =>
      (super.noSuchMethod(Invocation.method(#execute, [param]),
              returnValue: Future<List<_i5.Post>>.value(<_i5.Post>[]))
          as _i4.Future<List<_i5.Post>>);
}

/// A class which mocks [FetchPostUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class FetchPostUseCase2 extends _i1.Mock implements _i3.FetchPostUseCase {
  @override
  _i2.PostRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakePostRepository()) as _i2.PostRepository);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i4.Future<List<_i5.Post>> execute(_i3.FetchPostUseCaseParams? param) =>
      (super.noSuchMethod(Invocation.method(#execute, [param]),
              returnValue: Future<List<_i5.Post>>.value(<_i5.Post>[]))
          as _i4.Future<List<_i5.Post>>);
}
